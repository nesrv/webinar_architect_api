# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import weather_pb2 as weather__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in weather_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class WeatherServiceStub(object):
    """Сервис прогноза погоды
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCurrentWeather = channel.unary_unary(
                '/weather.WeatherService/GetCurrentWeather',
                request_serializer=weather__pb2.CityRequest.SerializeToString,
                response_deserializer=weather__pb2.WeatherResponse.FromString,
                _registered_method=True)
        self.GetForecast = channel.unary_unary(
                '/weather.WeatherService/GetForecast',
                request_serializer=weather__pb2.ForecastRequest.SerializeToString,
                response_deserializer=weather__pb2.ForecastResponse.FromString,
                _registered_method=True)
        self.SubscribeToWeatherUpdates = channel.unary_stream(
                '/weather.WeatherService/SubscribeToWeatherUpdates',
                request_serializer=weather__pb2.CityRequest.SerializeToString,
                response_deserializer=weather__pb2.WeatherResponse.FromString,
                _registered_method=True)
        self.SendWeatherData = channel.stream_unary(
                '/weather.WeatherService/SendWeatherData',
                request_serializer=weather__pb2.WeatherData.SerializeToString,
                response_deserializer=weather__pb2.DataResponse.FromString,
                _registered_method=True)
        self.ChatWithMeteorologist = channel.stream_stream(
                '/weather.WeatherService/ChatWithMeteorologist',
                request_serializer=weather__pb2.ChatMessage.SerializeToString,
                response_deserializer=weather__pb2.ChatMessage.FromString,
                _registered_method=True)


class WeatherServiceServicer(object):
    """Сервис прогноза погоды
    """

    def GetCurrentWeather(self, request, context):
        """Получить текущую погоду по городу
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetForecast(self, request, context):
        """Получить прогноз погоды на несколько дней
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToWeatherUpdates(self, request, context):
        """Подписаться на обновления погоды (стриминг с сервера)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendWeatherData(self, request_iterator, context):
        """Отправить данные с метеостанции (стриминг на сервер)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatWithMeteorologist(self, request_iterator, context):
        """Чат с метеорологом (двунаправленный стриминг)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WeatherServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCurrentWeather': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentWeather,
                    request_deserializer=weather__pb2.CityRequest.FromString,
                    response_serializer=weather__pb2.WeatherResponse.SerializeToString,
            ),
            'GetForecast': grpc.unary_unary_rpc_method_handler(
                    servicer.GetForecast,
                    request_deserializer=weather__pb2.ForecastRequest.FromString,
                    response_serializer=weather__pb2.ForecastResponse.SerializeToString,
            ),
            'SubscribeToWeatherUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToWeatherUpdates,
                    request_deserializer=weather__pb2.CityRequest.FromString,
                    response_serializer=weather__pb2.WeatherResponse.SerializeToString,
            ),
            'SendWeatherData': grpc.stream_unary_rpc_method_handler(
                    servicer.SendWeatherData,
                    request_deserializer=weather__pb2.WeatherData.FromString,
                    response_serializer=weather__pb2.DataResponse.SerializeToString,
            ),
            'ChatWithMeteorologist': grpc.stream_stream_rpc_method_handler(
                    servicer.ChatWithMeteorologist,
                    request_deserializer=weather__pb2.ChatMessage.FromString,
                    response_serializer=weather__pb2.ChatMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'weather.WeatherService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('weather.WeatherService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WeatherService(object):
    """Сервис прогноза погоды
    """

    @staticmethod
    def GetCurrentWeather(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weather.WeatherService/GetCurrentWeather',
            weather__pb2.CityRequest.SerializeToString,
            weather__pb2.WeatherResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetForecast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/weather.WeatherService/GetForecast',
            weather__pb2.ForecastRequest.SerializeToString,
            weather__pb2.ForecastResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToWeatherUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/weather.WeatherService/SubscribeToWeatherUpdates',
            weather__pb2.CityRequest.SerializeToString,
            weather__pb2.WeatherResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendWeatherData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/weather.WeatherService/SendWeatherData',
            weather__pb2.WeatherData.SerializeToString,
            weather__pb2.DataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChatWithMeteorologist(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/weather.WeatherService/ChatWithMeteorologist',
            weather__pb2.ChatMessage.SerializeToString,
            weather__pb2.ChatMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
